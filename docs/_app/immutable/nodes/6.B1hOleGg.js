import{f as g,a as l,t as C}from"../chunks/oJKTXW1w.js";import{o as N}from"../chunks/C-3Kyn5p.js";import{p as z,s as A,b as B,g as e,d as P,$ as T,f as c,c as i,i as v,h as G,r as a,n as R,t as x}from"../chunks/DVT4hDLY.js";import{s as Y}from"../chunks/BB7nONM-.js";import{e as Z,i as j}from"../chunks/qpBUtXQW.js";import{h as q}from"../chunks/B7ldBpxJ.js";import{s as D}from"../chunks/KwVppFjo.js";import{N as E}from"../chunks/D1n22Nx9.js";import{N as F}from"../chunks/ClPz6BUV.js";import{C as I}from"../chunks/BBmh62mE.js";import{v as M}from"../chunks/BPOdOirp.js";var S=g("<li><!></li>"),W=g(`<div class="items-stretch md:flex"><main class="min-h-dvh p-5 pt-10 md:px-8 md:py-10"><h1>Basics</h1> <p class="max-w-2xl text-lg">Before diving into the complexity, it is necessary to explore some fundamental concepts from Zap, which will help you start very easily.</p> <h2>Canvas</h2> <p>All diagrams drawn must be contained within a <span class="text-component font-mono">canvas</span> block. This block initializes the necessary
			drawing environment, managed by CeTZ, and allows you to place your components.</p> <!> <h2>Declaration</h2> <p>After you set up your canvas, you'll start adding different items called components. You add these components by using their own special
			functions.</p> <div class="mb-2 flex flex-wrap items-center justify-center gap-1 px-4 py-4 font-mono text-sm *:rounded-full *:px-3 *:py-1 *:font-light"><div class="bg-component/10 text-component">component</div> ( <div class="bg-string/10 text-string">"name"</div> , <div class="bg-float/10">(<span class="text-float">0</span>,<span class="text-float">0</span>)</div> , <div class="bg-float/10">(<span class="text-float">0</span>,<span class="text-float">0</span>)</div> , <div class="bg-params/10"><span class="text-params">..params</span></div> )</div> <p>You choose the type of <span class="text-component font-mono">component</span> you need from the <a href="/docs/components">full list</a>. Giving your component a <span class="text-string font-mono">name</span> is important as it lets you easily find and use this component later when you're building more
			of your circuit, and it helps you connect to its 'anchors' (connection points). We'll explain more about anchors next.</p> <p>The <span class="text-params font-mono">params</span> are settings that let you change how your component looks or what it does. For
			example, you can add a label like <span class="inline-flex flex-nowrap"><span class="text-params mr-1.5 font-mono">label:</span> <span class="text-string font-mono">$R_1$</span></span> to make things clearer or to show specific details, like the value of a resistor.</p> <!></main> <div class="relative hidden w-72 flex-none p-5 md:block"><ul class="sticky top-32 block"></ul></div></div>`);function at(y,b){z(b,!0);let m=A(B([]));N(()=>{const o=document.querySelectorAll("h1, h2, h3");G(m,Array.from(o).map((t,s)=>{const n=`heading-${s}`;return t.id=n,{level:parseInt(t.tagName.substring(1)),text:t.textContent||"",uid:n}}),!0)});var r=W();q(o=>{T.title="Basics"});var p=i(r),d=c(i(p),8);const $=v(()=>`#import "@preview/zap:${M}"

#zap.canvas({
    import zap: *

    resistor("r1", (0,0), (3,0), label: $R_1$)
})`);I(d,{get content(){return e($)}});var w=c(d,12);F(w,{next:{href:"/docs/positioning",title:"Positioning"},previous:{href:"/docs/",title:"Get started"}}),a(p);var f=c(p,2),h=i(f);Z(h,21,()=>e(m),j,(o,t)=>{var s=S(),n=i(s);const _=v(()=>`#${e(t).uid}`);E(n,{get href(){return e(_)},children:(k,H)=>{R();var u=C();x(()=>Y(u,e(t).text)),l(k,u)},$$slots:{default:!0}}),a(s),x(()=>D(s,`margin-left: ${e(t).level*10}px;`)),l(o,s)}),a(h),a(f),a(r),l(y,r),P()}export{at as component};

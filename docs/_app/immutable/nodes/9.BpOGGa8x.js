import{t as g,a as d,b as E}from"../chunks/DJeDSlXN.js";import{p as I,s as L,b as M,d as O,$ as U,f as e,c as o,g as W,r as t,n as f,h as r,t as z,i as j}from"../chunks/BW5Suhlk.js";import{s as J}from"../chunks/C-qzoTMg.js";import{e as Y,i as G}from"../chunks/DkDcXTgt.js";import{h as H}from"../chunks/CC5mRH25.js";import{b as N,s as K}from"../chunks/BhVmUNVw.js";import{o as Q}from"../chunks/BCjc47lQ.js";import{C as i}from"../chunks/S5hv3Wqa.js";import{N as V}from"../chunks/DvM5jBly.js";import{N as X}from"../chunks/DIFaQeiG.js";import{N as ee}from"../chunks/D_ZUGEti.js";const te=""+new URL("../assets/one-node.DnWFvYhA.svg",import.meta.url).href,oe=""+new URL("../assets/two-nodes.rfvwN8xp.svg",import.meta.url).href;var ae=g(`The two-node placement method is <span class="font-medium">only suitable for components that can be represented with two connections</span>. For example, a MOSFET or BJT transistor requires three nodes, so it can only be
			placed using the one-node placement method.`,1),se=g("<li><!></li>"),ne=g(`<div class="items-stretch md:flex"><main class="min-h-dvh p-5 pt-10 md:px-8 md:py-10"><h1>Positioning</h1> <p class="max-w-2xl text-lg">Zap simplifies component positioning through CeTZ, providing two methods for placing
			your circuit elements.</p> <h2>Component placement</h2> <p>To position components within your circuit, you can choose to either attach them to a
			single node, or place them between two nodes with automatic wiring.</p> <div class="mb-4 grid gap-7 md:grid-cols-2"><div><div class="dark:border-neutral-border mb-4 flex max-h-40 items-center overflow-hidden rounded-lg border border-neutral-200"><img class="w-full" alt="resistor using one-node placement"></div> <!></div> <div><div class="dark:border-neutral-border mb-4 flex max-h-40 items-center overflow-hidden rounded-lg border border-neutral-200"><img class="w-full" alt="resistor using one-node placement"></div> <!></div></div> <!> <h2>Cartesian coordinates</h2> <p>The most fundamental coordinate, like the example provided, is a <a href="https://typst.app/docs/reference/foundations/array/" target="_blank">Typst array</a> with two dimensions (<span class="text-float font-mono">x</span> representing the
			horizontal position, and <span class="text-float font-mono">y</span> the vertical).</p> <!> <h2 class="mt-3">Named anchors</h2> <p>Sometimes, you just want to connect a node from one component to another without
			worrying about coordinates or doing mental math. Thatâ€™s where named anchors come in.</p> <p>The name provided as the first argument acts as an identifier for the component, as
			shown below.</p> <!> <p>Now that this resistor is identified by its name <span class="text-string font-mono">r1</span>, we can attach a voltage source to one of it's nodes like this.</p> <!> <p>The only slightly tricky part is knowing which sub-anchors each component provides, but
			don't worry, you can always refer to the <a href="/zap/docs/components/">components list</a> for a complete overview of available anchors.</p> <p>In most cases, especially with two-node components, you'll typically use <span class="text-string font-mono">in</span> and <span class="text-string font-mono">out</span>.</p> <h2 class="mt-3">Relative coordinates</h2> <p>Check the <a href="https://cetz-package.github.io/docs/basics/coordinate-systems/#relative">CeTZ documentation</a></p> <h2 class="mt-3">Orthogonal</h2> <p>Check the <a href="https://cetz-package.github.io/docs/basics/coordinate-systems/#relative">CeTZ documentation</a></p> <!></main> <div class="relative hidden w-72 flex-none p-5 md:block"><ul class="sticky top-32 block"></ul></div></div>`);function we(P,Z){I(Z,!0);let w=L(M([]));Q(()=>{const n=document.querySelectorAll("h1, h2, h3");W(w,Array.from(n).map((a,s)=>{const c=`heading-${s}`;return a.id=c,{level:parseInt(a.tagName.substring(1)),text:a.textContent||"",uid:c}}),!0)});var p=ne();H(n=>{U.title="Positioning"});var l=o(p),m=e(o(l),8),h=o(m),v=o(h),A=o(v);N(A,"src",te),t(v);var B=e(v,2);i(B,{content:`#zap.canvas({
    resistor("r1", (0,0))
})`}),t(h);var b=e(h,2),u=o(b),F=o(u);N(F,"src",oe),t(u);var R=e(u,2);i(R,{content:`#zap.canvas({
    resistor("r1", (0,0), (5,0))
})`}),t(b),t(m);var x=e(m,2);X(x,{type:"warning",title:"Warning",children:(n,a)=>{f();var s=ae();f(2),d(n,s)},$$slots:{default:!0}});var y=e(x,6);i(y,{content:"#let myCoordinate = (0, 0)"});var _=e(y,8);i(_,{content:`#zap.canvas({
    resistor("r1", (0,0), (5,0))
})`});var $=e(_,4);i($,{content:`#zap.canvas({
    resistor("r1", (0,0), (5,0))
    vsource("v1", "r1.out", (5,5))
})`});var S=e($,14);ee(S,{next:{href:"/zap/docs/decorations",title:"Decorations"},previous:{href:"/zap/docs/basics",title:"Basics"}}),t(l);var k=e(l,2),T=o(k);Y(T,21,()=>r(w),G,(n,a)=>{var s=se(),c=o(s);const q=j(()=>`#${r(a).uid}`);V(c,{get href(){return r(q)},children:(D,re)=>{f();var C=E();z(()=>J(C,r(a).text)),d(D,C)},$$slots:{default:!0}}),t(s),z(()=>K(s,`margin-left: ${r(a).level*10}px;`)),d(n,s)}),t(T),t(k),t(p),d(P,p),O()}export{we as component};
